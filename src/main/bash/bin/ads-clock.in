#! @BASH_SH@ -
# @configure_input@

# Copyright (c) 2016 Alan D. Salewski <salewski@att.net>
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software Foundation,
#     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,, USA.

# ads-clock: Use your terminal as a (non-ugly) clock.
#
# See the man page ads-clock(1) or run the 'perldoc' command on this file to
# read the full documentation.

declare -r PROG='ads-clock'

# FIXME: one day this will be filtered in at build time
# declare -r MAINTAINER='Alan D. Salewski <salewski@att.net>'
declare -r MAINTAINER='@PACKAGE_BUGREPORT@'


# FIXME: one day this will be filtered in at build time
# declare -r VERSION='0.0.1'
declare -r VERSION='@VERSION@'


# FIXME: one day this will be filtered in at build time
# This variable is replaced at build time
declare -r gl_const_build_date='@BUILD_DATE@'
declare -r gl_const_release="${VERSION}  (built: ${gl_const_build_date})"
# declare -r gl_const_release="${VERSION}"

BE_VERBOSE=false

# This one implies BE_VERBOSE, too
DEBUGGING=false  # debug-level output; override with two '-v' opts


# By default we'll use the external programs found at configure-time. But we
# allow the user to override any particular tool by setting an environment
# variable named after the tool (with hyphen chars changed to underscores).

# Externally-provided programs
#
CAT_PROG="${CAT:-@CAT@}"
EXPR_PROG="${EXPR:-@EXPR_PROG@}"
WATCH_PROG="${WATCH:-@WATCH_PROG@}"

# Programs provided by the 'ads-clock' project -- these can be overridden by
# the user, but the default location for them is determined by where the
# 'ads-clock' project programs were configured to be installed at configure
# time (rather than via some pre-existing installed version found at configure
# time).
#
ADS_CLOCK_ONCE_PROG="${ADS_CLOCK_ONCE:-@bindir@/ads-clock-once}"



declare -a NEEDED_EXTERNAL_PROGS=(
    "${CAT_PROG}"
    "${EXPR_PROG}"
    "${WATCH_PROG}"

    "${ADS_CLOCK_ONCE_PROG}"
)

declare -a F_CLEANUP_HOOK_NAMES=()

function f_add_cleanup_hook_name () {
    F_CLEANUP_HOOK_NAMES+=( $1 );
}


function f_cleanup () {

    if test ${#F_CLEANUP_HOOK_NAMES[@]} -eq 0; then
        # No cleanup hooks, so nothing to do
        return
    fi

    local cleanup_hook
    local idx

    let idx=${#F_CLEANUP_HOOK_NAMES[@]}-1

    # Note that we're running the cleanup hooks in opposite order from which
    # they were installed.
    #
    while test $idx -ge 0; do

        cleanup_hook=${F_CLEANUP_HOOK_NAMES[$idx]}

        if $BE_VERBOSE; then
            printf "${PROG} (info): running cleanup hook: [%s]\n" "${cleanup_hook}" 1>&2
        fi

        test -n "$cleanup_hook" && eval "$cleanup_hook"

        let idx=$idx-1
    done
}

function f_cleanup_and_die () {
    f_cleanup
    exit 1
}

trap 'printf "$PROG (warn): HUP signal caught; bailing out\n"  1>&2; f_cleanup_and_die' HUP
trap 'printf "$PROG (warn): INT signal caught; bailing out\n"  1>&2; f_cleanup_and_die' INT
trap 'printf "$PROG (warn): QUIT signal caught; bailing out\n" 1>&2; f_cleanup_and_die' QUIT
trap 'printf "$PROG (warn): TERM signal caught; bailing out\n" 1>&2; f_cleanup_and_die' TERM

trap 'f_cleanup' EXIT

for ext_tool in "${NEEDED_EXTERNAL_PROGS[@]}"; do

    t_path=$(builtin type -p "${ext_tool}")
    if test $? -ne 0; then
        printf "${PROG} (error): was unable to locate \"%s\" on PATH; bailing out\n" "${ext_tool}" 1>&2
        exit 1
    fi

    if $DEBUGGING; then
        printf "${PROG} (debug): path to external tool \"%s\": %s\n" "${ext_tool}" "${t_path}" 1>&2
    fi
done


f_print_help () {

    "${CAT_PROG}" <<EOF
usage: $PROG [OPTION...]
Use your terminal as a (non-ugly) clock.

  -h, --help     Print this help message on stdout
  -V, --version  Print the version of the program on stdout
  -v, --verbose  Tell what is being done. Two or more -v options turns on tracing (set -x)
      --         Signals the end of options and disables further options processing.

Report bugs to $MAINTAINER.
EOF
}

f_print_version () {
    "${CAT_PROG}" <<EOF
${PROG} ${gl_const_release}
Copyright (C) 2016 Alan D. Salewski
License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Alan D. Salewski.
EOF
}


while test $# -gt 0 ; do

    option=$("${EXPR_PROG}" "x$1" : 'x\(--[^=]*\)' \| \
                            "x$1" : 'x\(-.\)'      \| \
                            "x$1" : 'x\(.*\)')

    optarg=$("${EXPR_PROG}" "x$1" : 'x--[^=]*=\(.*\)' \| \
                            "x$1" : 'x-.\(.*\)')

    case $1 in

        --help | -h )
            # print help message
            f_print_help
            exit 0
            ;;

        --version | -V )
            # print program version info
            f_print_version
            exit 0
            ;;

        --verbose | -v )
            # Accumulating 'verbose' opt. A single -v opt simply turns
            # BE_VERBOSE on (info level output); two '-v' opts turns on
            # $DEBUGGING (debug level output); three or more '-v' opts turns
            # tracing on. Note that if you intend to turn tracing on, you'll
            # probably want your -v opts to be the first opts on the command
            # line (so they take effect earlier).
            #
            if $BE_VERBOSE; then

                # We've seen at least one -v opt before; if this is the second
                # we'll turn on debugging mode, but if it's the third or
                # greater then we'll turn tracing on
                if $DEBUGGING; then
                    # We've seen at least two -v opts before, so now we're turning tracing on
                    set -x
                else
                    # Second -v opt we're seeing
                    DEBUGGING=true
                fi
            else
                # First -v opt we're seeing
                BE_VERBOSE=true
            fi
            shift
            ;;

        -- ) # Stop option processing
            shift
            break
            ;;

        --* | -* )
            # Unrecognized option
            printf "${PROG} (error): unrecognized option \`%s'\n" "$option" 1>&2
            f_print_help 1>&2
            exit 1
            ;;

        * ) # Unrecognized non-option

            # We'll treat the first non-option and all remaining arguments as
            # names of files to process; note that we DO NOT shift off the
            # first, but merely stop processing command line options when we
            # see it.
            break
            ;;
    esac
done

# FIXME: exit with error if we encounter any unexpected command line arguments


# # All remaining arguments are interpretted as the names of files to process.
# #
# while test $# -gt 0 ; do

#     _one_file_path=$1; shift

#     # do something with ${_one_file_path}
# done


#     $ watch -n 1 '(dt=$(date --rfc-3339=seconds); for fnt in slant shadow small smscript; do echo "$dt" | figlet -t -c -W -f "$fnt"; done)'
#
#     $ watch -n 1 '(dt=$(date --rfc-3339=seconds); for nn in $(seq 1 30); do echo; done; echo "$dt" | figlet -t -c -W )'

# CSI = "Control Sequence Introducer" (or maybe "Control Sequence Initiator"); see notes above.
export CSI='\033['

export COLOR_OFF="${CSI}0m"

# 16 colors available on all color consoles ("normal" and "bright" variations)
#
export COLOR_BRIGHT_WHITE="${CSI}1;37m"
export COLOR_WHITE="${CSI}0;37m"

export COLOR_GRAY="${CSI}1;30m"
export COLOR_BLACK="${CSI}0;30m"

export COLOR_RED="${CSI}0;31m"
export COLOR_BRIGHT_RED="${CSI}1;31m"

export COLOR_GREEN="${CSI}0;32m"
export COLOR_BRIGHT_GREEN="${CSI}1;32m"

export COLOR_YELLOW="${CSI}0;33m"
export COLOR_BRIGHT_YELLOW="${CSI}1;33m"

export COLOR_BLUE="${CSI}0;34m"
export COLOR_BRIGHT_BLUE="${CSI}1;34m"

export COLOR_MAGENTA="${CSI}0;35m"
export COLOR_BRIGHT_MAGENTA="${CSI}1;35m"
export COLOR_CYAN="${CSI}0;36m"
export COLOR_BRIGHT_CYAN="${CSI}1;36m"

# $ (dt=$(date --rfc-3339=seconds); for nn in $(seq 1 30); do echo; done; echo "$dt" | toilet -f term -t -W -f bigmono12)

# NOTE: interval unit is seconds
"${WATCH_PROG}" --interval 1 \
                --no-title   \
                --color      \
                ads-clock-once


#
# ----------------------------------------------------------------------------
# Documentation
#
# The docs are in Perl's POD format, so you can run either the 'perldoc' or
# 'pod2man' programs on this file to produce a man page.
#
# To generate a man page for distribution (in a tarball or RPM, for instance),
# you'll probably want to run pod2man something like this:
#
#     $ pod2man /path/to/this/file \
#               --center='ads-clock' \
#               --release='ads-clock-0.1.0' \
#               --section='1' \
#               > /outputdir/ads-clock.1
#
# To inspect the page formatting, etc., you can pipe the above 'pod2man'
# command to:
#
#     'man -l -'
#
# instead of redirecting the output to a file.
#
# ----------------------------------------------------------------------------

=pod

=head1 NAME

  ads-clock - Use your terminal as a (non-ugly) clock


=head1 SYNOPSIS

  ads-clock --help
  ads-clock --version

  ads-clock [OPTION...]


=head1 DESCRIPTION

The C<ads-clock> program is part of the C<ads-clock> project.

The C<ads-clock> program shows a large, (hopefully) non-ugly clock on your
terminal. It uses the L<watch(1)> program to invoke the L<ads-clock-once(1)>
program every second -- each of which constitutes a single "clock tick" --
producing the effect of a clock that updates every second.

The C<HH:mm:ss> portion of the display is shown in cyan to have it stand out
from the surrounding text. That works pretty well, assuming the default color
of your terminal text is not cyan. No facility is provided in this initial
version to control the color (this is considered a bug; patches and/or GitHub
pull requests welcome).


=head2 Motivation

Why does the world need yet another computer clock program? Well, it probably
doesn't, but the author could not find one that does exactly what he was
looking for, and knew he could hack it together himself pretty quickly.

The motivating kit setup is a small (15 inch) laptop display with a 3200x1800
pixel resolution (which, writing in mid-2016, is considered a high resolution
for a laptop display). When the laptop is docked next to a much larger
(30-inch or 50-inch) 4k-pixel display monitor, the laptop display is too small
to be comfortably used as "a second monitor"; the size difference is simply
too jarring.

Rather than keep the laptop lid closed, however, an C<ads-clock> can be left
running on it (in a terminal window stretched across the entire laptop
display). The clock is designed to be visibly large, so makes good use of the
display that is slightly out of the way, but still easily visible.


=head1 OPTIONS

Below are the command line options currently accepted by C<ads-clock>.


=over 4

=item -h, --help

Print help usage message


=item -V, --version

Print the version of the program to stdout and then exit.


=item -v, --verbose

Turn on verbose mode. Causes program to emit messages on C<stderr> indicating
what it is doing. The option may be specified multiple times to increase
fruther the level of verbosity. One C<-v> option enables info-level output;
two such opts enable debug-level output; three or more enable trace-level
output.


=item --

Signals the end of options and disables further options processing.

=back


=head1 DIAGNOSTICS

Exits with zero on success, non-zero on error.


=head1 BUGS

=over 4

=item Colors are hard-coded

No facility is provided in this initial version to control the colors that are
used to display the clock. Most of the clock will be displayed using the
default foreground and background colors of your terminal, but the C<HH:mm:ss>
portion is hard-coded (for the moment) to be displayed in cyan.

=item No check is made to check that output is actually to a terminal

=item Probably tons of others

If you find any, please report them as described in the C<BUGS> file.

=back


=head1 SEE ALSO

=over 4

=item ads-clock-once(1)

=item ads-clock project page on GitHub

L<https://github.com/salewski/ads-clock>

=item watch(1)

=back


=head1 AUTHOR

=over 4

=item Alan D. Salewski  <salewski@att.net>

=back


=head1 COPYRIGHT

Copyright 2016 Alan D. Salewski

=cut


# Local Variables:
#     mode: sh
#     eval: (sh-set-shell "bash" t nil)
# End:
